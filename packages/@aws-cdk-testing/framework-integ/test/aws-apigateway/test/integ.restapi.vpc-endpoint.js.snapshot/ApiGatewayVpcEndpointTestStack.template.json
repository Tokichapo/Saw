{
 "Resources": {
  "Vpc8378EB38": {
   "Type": "AWS::EC2::VPC",
   "Properties": {
    "CidrBlock": "10.0.0.0/16",
    "EnableDnsHostnames": true,
    "EnableDnsSupport": true,
    "InstanceTenancy": "default",
    "Tags": [
     {
      "Key": "Name",
      "Value": "ApiGatewayVpcEndpointTestStack/Vpc"
     }
    ]
   }
  },
  "VpcPublicSubnet1Subnet5C2D37C4": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      0,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.0.0/18",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "ApiGatewayVpcEndpointTestStack/Vpc/PublicSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   }
  },
  "VpcPublicSubnet1RouteTable6C95E38E": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "ApiGatewayVpcEndpointTestStack/Vpc/PublicSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   }
  },
  "VpcPublicSubnet1RouteTableAssociation97140677": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "VpcPublicSubnet1RouteTable6C95E38E"
    },
    "SubnetId": {
     "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
    }
   }
  },
  "VpcPublicSubnet1DefaultRoute3DA9E72A": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "VpcIGWD7BA715C"
    },
    "RouteTableId": {
     "Ref": "VpcPublicSubnet1RouteTable6C95E38E"
    }
   },
   "DependsOn": [
    "VpcVPCGWBF912B6E"
   ]
  },
  "VpcPublicSubnet2Subnet691E08A3": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      1,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.64.0/18",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "ApiGatewayVpcEndpointTestStack/Vpc/PublicSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   }
  },
  "VpcPublicSubnet2RouteTable94F7E489": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "ApiGatewayVpcEndpointTestStack/Vpc/PublicSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   }
  },
  "VpcPublicSubnet2RouteTableAssociationDD5762D8": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "VpcPublicSubnet2RouteTable94F7E489"
    },
    "SubnetId": {
     "Ref": "VpcPublicSubnet2Subnet691E08A3"
    }
   }
  },
  "VpcPublicSubnet2DefaultRoute97F91067": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "VpcIGWD7BA715C"
    },
    "RouteTableId": {
     "Ref": "VpcPublicSubnet2RouteTable94F7E489"
    }
   },
   "DependsOn": [
    "VpcVPCGWBF912B6E"
   ]
  },
  "VpcIsolatedSubnet1SubnetE48C5737": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      0,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.128.0/18",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Isolated"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Isolated"
     },
     {
      "Key": "Name",
      "Value": "ApiGatewayVpcEndpointTestStack/Vpc/IsolatedSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   }
  },
  "VpcIsolatedSubnet1RouteTable4771E3E5": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "ApiGatewayVpcEndpointTestStack/Vpc/IsolatedSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   }
  },
  "VpcIsolatedSubnet1RouteTableAssociationD300FCBB": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "VpcIsolatedSubnet1RouteTable4771E3E5"
    },
    "SubnetId": {
     "Ref": "VpcIsolatedSubnet1SubnetE48C5737"
    }
   }
  },
  "VpcIsolatedSubnet2Subnet16364B91": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      1,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.192.0/18",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Isolated"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Isolated"
     },
     {
      "Key": "Name",
      "Value": "ApiGatewayVpcEndpointTestStack/Vpc/IsolatedSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   }
  },
  "VpcIsolatedSubnet2RouteTable1D30AF7D": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "ApiGatewayVpcEndpointTestStack/Vpc/IsolatedSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   }
  },
  "VpcIsolatedSubnet2RouteTableAssociationF7B18CCA": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "VpcIsolatedSubnet2RouteTable1D30AF7D"
    },
    "SubnetId": {
     "Ref": "VpcIsolatedSubnet2Subnet16364B91"
    }
   }
  },
  "VpcIGWD7BA715C": {
   "Type": "AWS::EC2::InternetGateway",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "ApiGatewayVpcEndpointTestStack/Vpc"
     }
    ]
   }
  },
  "VpcVPCGWBF912B6E": {
   "Type": "AWS::EC2::VPCGatewayAttachment",
   "Properties": {
    "InternetGatewayId": {
     "Ref": "VpcIGWD7BA715C"
    },
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   }
  },
  "VpcVpcEndpointSecurityGroup0E497F39": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "ApiGatewayVpcEndpointTestStack/Vpc/VpcEndpoint/SecurityGroup",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "SecurityGroupIngress": [
     {
      "CidrIp": {
       "Fn::GetAtt": [
        "Vpc8378EB38",
        "CidrBlock"
       ]
      },
      "Description": {
       "Fn::Join": [
        "",
        [
         "from ",
         {
          "Fn::GetAtt": [
           "Vpc8378EB38",
           "CidrBlock"
          ]
         },
         ":443"
        ]
       ]
      },
      "FromPort": 443,
      "IpProtocol": "tcp",
      "ToPort": 443
     }
    ],
    "Tags": [
     {
      "Key": "Name",
      "Value": "ApiGatewayVpcEndpointTestStack/Vpc"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   }
  },
  "VpcVpcEndpointSecurityGroupfromApiGatewayVpcEndpointTestStackTestFunctionSecurityGroupF0399EA7443F41B758E": {
   "Type": "AWS::EC2::SecurityGroupIngress",
   "Properties": {
    "Description": "from ApiGatewayVpcEndpointTestStackTestFunctionSecurityGroupF0399EA7:443",
    "FromPort": 443,
    "GroupId": {
     "Fn::GetAtt": [
      "VpcVpcEndpointSecurityGroup0E497F39",
      "GroupId"
     ]
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Fn::GetAtt": [
      "TestFunctionSecurityGroupAC0FED4B",
      "GroupId"
     ]
    },
    "ToPort": 443
   }
  },
  "VpcVpcEndpoint697E0D62": {
   "Type": "AWS::EC2::VPCEndpoint",
   "Properties": {
    "PrivateDnsEnabled": true,
    "SecurityGroupIds": [
     {
      "Fn::GetAtt": [
       "VpcVpcEndpointSecurityGroup0E497F39",
       "GroupId"
      ]
     }
    ],
    "ServiceName": {
     "Fn::Join": [
      "",
      [
       "com.amazonaws.",
       {
        "Ref": "AWS::Region"
       },
       ".execute-api"
      ]
     ]
    },
    "SubnetIds": [
     {
      "Ref": "VpcIsolatedSubnet1SubnetE48C5737"
     },
     {
      "Ref": "VpcIsolatedSubnet2Subnet16364B91"
     }
    ],
    "VpcEndpointType": "Interface",
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   }
  },
  "ApiF70053CD": {
   "Type": "AWS::ApiGateway::RestApi",
   "Properties": {
    "EndpointConfiguration": {
     "Types": [
      "PRIVATE"
     ],
     "VpcEndpointIds": [
      {
       "Ref": "VpcVpcEndpoint697E0D62"
      }
     ]
    },
    "Name": "Api",
    "Policy": {
     "Statement": [
      {
       "Action": "execute-api:Invoke",
       "Condition": {
        "StringNotEquals": {
         "aws:SourceVpce": {
          "Ref": "VpcVpcEndpoint697E0D62"
         }
        }
       },
       "Effect": "Deny",
       "Principal": {
        "AWS": "*"
       },
       "Resource": "execute-api:/*"
      },
      {
       "Action": "execute-api:Invoke",
       "Effect": "Allow",
       "Principal": {
        "AWS": "*"
       },
       "Resource": "execute-api:/*"
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "ApiCloudWatchRole73EC6FC4": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "apigateway.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
       ]
      ]
     }
    ]
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "ApiAccountA18C9B29": {
   "Type": "AWS::ApiGateway::Account",
   "Properties": {
    "CloudWatchRoleArn": {
     "Fn::GetAtt": [
      "ApiCloudWatchRole73EC6FC4",
      "Arn"
     ]
    }
   },
   "DependsOn": [
    "ApiF70053CD"
   ],
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "ApiDeploymentB17BE62D92eec14a5efe64a86b912ba4f73801b8": {
   "Type": "AWS::ApiGateway::Deployment",
   "Properties": {
    "Description": "Automatically created by the RestApi construct",
    "RestApiId": {
     "Ref": "ApiF70053CD"
    }
   },
   "DependsOn": [
    "ApiGET9257B917"
   ]
  },
  "ApiDeploymentStageprod3EB9684E": {
   "Type": "AWS::ApiGateway::Stage",
   "Properties": {
    "DeploymentId": {
     "Ref": "ApiDeploymentB17BE62D92eec14a5efe64a86b912ba4f73801b8"
    },
    "RestApiId": {
     "Ref": "ApiF70053CD"
    },
    "StageName": "prod"
   },
   "DependsOn": [
    "ApiAccountA18C9B29"
   ]
  },
  "ApiGET9257B917": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "NONE",
    "HttpMethod": "GET",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseTemplates": {
        "application/json": "{\"message\":\"OK\"}"
       },
       "StatusCode": "200"
      }
     ],
     "RequestTemplates": {
      "application/json": "{\"statusCode\":200}"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "StatusCode": "200"
     }
    ],
    "ResourceId": {
     "Fn::GetAtt": [
      "ApiF70053CD",
      "RootResourceId"
     ]
    },
    "RestApiId": {
     "Ref": "ApiF70053CD"
    }
   }
  },
  "TestFunctionServiceRole6ABD93C7": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
       ]
      ]
     }
    ]
   },
   "DependsOn": [
    "VpcIsolatedSubnet1RouteTableAssociationD300FCBB",
    "VpcIsolatedSubnet2RouteTableAssociationF7B18CCA"
   ]
  },
  "TestFunctionServiceRoleDefaultPolicy810BAB0B": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "execute-api:Invoke",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":execute-api:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":",
          {
           "Ref": "ApiF70053CD"
          },
          "/*/*/*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "TestFunctionServiceRoleDefaultPolicy810BAB0B",
    "Roles": [
     {
      "Ref": "TestFunctionServiceRole6ABD93C7"
     }
    ]
   },
   "DependsOn": [
    "VpcIsolatedSubnet1RouteTableAssociationD300FCBB",
    "VpcIsolatedSubnet2RouteTableAssociationF7B18CCA"
   ]
  },
  "TestFunctionSecurityGroupAC0FED4B": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "Automatic security group for Lambda Function ApiGatewayVpcEndpointTestStackTestFunction7D61CC28",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   },
   "DependsOn": [
    "VpcIsolatedSubnet1RouteTableAssociationD300FCBB",
    "VpcIsolatedSubnet2RouteTableAssociationF7B18CCA"
   ]
  },
  "TestFunction22AD90FC": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "\n        const https = require('https');\n\n        const httpsGet = (url) => {\n          return new Promise((resolve, reject) => {\n            https.get(url, (res) => {\n              let data = '';\n\n              res.on('data', (chunk) => {\n                data += chunk;\n              });\n\n              res.on('end', () => {\n                resolve(data);\n              });\n\n              res.on('error', (e) => {\n                reject(e);\n              });\n            });\n          });\n        };\n\n        exports.handler = async function(event) {\n          const apiEndpoint = process.env.API_ENDPOINT;\n\n          try {\n            const data = await httpsGet(apiEndpoint);\n            return {\n              statusCode: 200,\n              body: JSON.stringify({ message: 'Success', data }),\n            };\n          } catch (error) {\n            return {\n              statusCode: 500,\n              body: JSON.stringify({ message: 'Error', error: error.message }),\n            };\n          }\n        };\n      "
    },
    "Environment": {
     "Variables": {
      "API_ENDPOINT": {
       "Fn::Join": [
        "",
        [
         "https://",
         {
          "Ref": "ApiF70053CD"
         },
         ".execute-api.",
         {
          "Ref": "AWS::Region"
         },
         ".",
         {
          "Ref": "AWS::URLSuffix"
         },
         "/",
         {
          "Ref": "ApiDeploymentStageprod3EB9684E"
         },
         "/"
        ]
       ]
      }
     }
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "TestFunctionServiceRole6ABD93C7",
      "Arn"
     ]
    },
    "Runtime": "nodejs20.x",
    "VpcConfig": {
     "SecurityGroupIds": [
      {
       "Fn::GetAtt": [
        "TestFunctionSecurityGroupAC0FED4B",
        "GroupId"
       ]
      }
     ],
     "SubnetIds": [
      {
       "Ref": "VpcIsolatedSubnet1SubnetE48C5737"
      },
      {
       "Ref": "VpcIsolatedSubnet2Subnet16364B91"
      }
     ]
    }
   },
   "DependsOn": [
    "TestFunctionServiceRoleDefaultPolicy810BAB0B",
    "TestFunctionServiceRole6ABD93C7",
    "VpcIsolatedSubnet1RouteTableAssociationD300FCBB",
    "VpcIsolatedSubnet2RouteTableAssociationF7B18CCA"
   ]
  }
 },
 "Outputs": {
  "ApiEndpoint4F160690": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "ApiF70053CD"
      },
      ".execute-api.",
      {
       "Ref": "AWS::Region"
      },
      ".",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "ApiDeploymentStageprod3EB9684E"
      },
      "/"
     ]
    ]
   }
  },
  "ExportsOutputRefTestFunction22AD90FC921DCA96": {
   "Value": {
    "Ref": "TestFunction22AD90FC"
   },
   "Export": {
    "Name": "ApiGatewayVpcEndpointTestStack:ExportsOutputRefTestFunction22AD90FC921DCA96"
   }
  },
  "ExportsOutputFnGetAttTestFunction22AD90FCArn01516C4C": {
   "Value": {
    "Fn::GetAtt": [
     "TestFunction22AD90FC",
     "Arn"
    ]
   },
   "Export": {
    "Name": "ApiGatewayVpcEndpointTestStack:ExportsOutputFnGetAttTestFunction22AD90FCArn01516C4C"
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}